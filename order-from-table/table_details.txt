order-from-table/
    app/
        __init__.py
        dataAccessLayer.py
        database.py
        db.py
        main.py
        models.py
        routes.py
    config.py
    requirements.txt
    run.py
    table_details.txt
logs/
    myapp.log

CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE -- Category name (e.g., Pizza, Beverages)
);

CREATE TABLE tables (
    table_id SERIAL PRIMARY KEY,
    table_number INT NOT NULL UNIQUE,  -- Physical table number
    qr_code TEXT NOT NULL              -- Unique QR code link
);

CREATE TABLE menu_items (
    menu_item_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,        -- Name of the menu item
    description TEXT,                  -- Description of the item
    price DECIMAL(10, 2) NOT NULL,     -- Price of the item
    is_available BOOLEAN DEFAULT TRUE, -- Availability status
    category_id INT,                   -- Links to the category
    FOREIGN KEY (category_id) REFERENCES categories(category_id)
);

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    table_id INT NOT NULL,             -- Links to the table that placed the order
    order_status TEXT CHECK (order_status IN ('pending', 'in_progress', 'completed', 'cancelled')) DEFAULT 'pending', 
    total_price DECIMAL(10, 2),        -- Total price of the order
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Order creation timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Automatically updates on modification
    FOREIGN KEY (table_id) REFERENCES tables(table_id)
);

CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INT NOT NULL,             -- Links to the specific order
    menu_item_id INT NOT NULL,         -- Links to the specific menu item
    quantity INT NOT NULL DEFAULT 1,   -- Quantity of the item ordered
    price DECIMAL(10, 2) NOT NULL,     -- Price of the item at the time of order
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (menu_item_id) REFERENCES menu_items(menu_item_id)
);

CREATE TABLE payments (
    payment_id SERIAL PRIMARY KEY,
    order_id INT NOT NULL,             -- Links to the specific order
    payment_method TEXT CHECK (payment_method IN ('cash', 'card', 'online')) NOT NULL, -- Payment type
    payment_status TEXT CHECK (payment_status IN ('pending', 'paid', 'failed')) DEFAULT 'pending',
    amount DECIMAL(10, 2) NOT NULL,    -- Amount paid
    paid_at TIMESTAMP DEFAULT NULL,    -- Payment completion timestamp
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);


---values---

INSERT INTO categories (name) VALUES
('Pizza'),
('Beverages');


INSERT INTO tables (table_number, qr_code) VALUES
(1, 'https://example.com/qr/table1'),
(2, 'https://example.com/qr/table2');


INSERT INTO menu_items (name, description, price, is_available, category_id) VALUES
('Margherita Pizza', 'Classic cheese and tomato pizza', 8.99, TRUE, 1),
('Pepperoni Pizza', 'Pepperoni and cheese topping', 10.99, TRUE, 1),
('Coke', 'Chilled soft drink', 1.99, TRUE, 2),
('Orange Juice', 'Freshly squeezed orange juice', 2.99, TRUE, 2);


INSERT INTO orders (table_id, order_status, total_price) VALUES
(1, 'pending', 12.97); -- Total = $8.99 + (2 * $1.99)


INSERT INTO order_items (order_id, menu_item_id, quantity, price) VALUES
(1, 1, 1, 8.99), -- 1 Margherita Pizza
(1, 3, 2, 1.99); -- 2 Cokes


INSERT INTO payments (order_id, payment_method, payment_status, amount, paid_at) VALUES
(1, 'online', 'paid', 12.97, CURRENT_TIMESTAMP);


----to get full order details------

SELECT 
    o.order_id,
    t.table_number,
    o.order_status,
    o.total_price,
    mi.name AS menu_item,
    oi.quantity,
    oi.price AS item_price,
    p.payment_method,
    p.payment_status,
    p.amount AS payment_amount,
    p.paid_at
FROM orders o
JOIN tables t ON o.table_id = t.table_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN menu_items mi ON oi.menu_item_id = mi.menu_item_id
JOIN payments p ON o.order_id = p.order_id
WHERE o.order_id = 1;


